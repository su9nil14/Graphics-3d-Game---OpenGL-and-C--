#version 330

in vec2 frag_tex_coord;
in vec3 position_eye, normal_eye;
in mat4 view_mat;

uniform sampler2D tex;


vec3 light_position_world  = vec3(-2.0, 2.0, 4.0) ;

vec3 Ls = vec3(0.7, 0.7, 0.7);//white specular
vec3 Ld = vec3(1.0, 1.0, 1.0);//dull white diffuse
vec3 La = vec3(0.2, 0.2, 0.2);//grey ambient

vec3 Ks = vec3(1.0, 1.0, 1.0); //fully reflect specular light
vec3 Kd = vec3(1.0, 0.5, 0.0); //orange diffuse surface reflectance
vec3 Ka = vec3(1.0, 1.0, 1.0); //fully reflect ambient light
float specular_exponent = 100.0; //specular power

//implemenntation of distance fog
const vec4 fog_color = vec4(0.04, 0.1, 0.1, 1.0);
const float fog_density = 0.02;


out vec4 fragment_colour; //final color

void main () {

    vec3 Ia = La * Ka; //ambient intensity
	
	
	// raise light position to eye space
    vec3 light_position_eye = vec3(view_mat * vec4(light_position_world, 1.0));
    vec3 distance_to_light_eye = light_position_eye - position_eye;
    vec3 direction_to_light_eye = normalize(distance_to_light_eye);
    float dot_prod = dot(direction_to_light_eye, normal_eye);
    dot_prod = max(dot_prod, 0.0);
	
    vec3 Id = Ld * Kd * dot_prod;

    vec3 reflection_eye = reflect(-direction_to_light_eye, normal_eye);
	//phong
    vec3 surface_to_viewer_eye = normalize(-position_eye);
    float dot_prod_specular = dot(reflection_eye, surface_to_viewer_eye);
    dot_prod_specular = max(dot_prod_specular, 0.0);
    float specular_factor = pow(dot_prod_specular, specular_exponent);
	
    vec3 Is = Ls * Ks * specular_factor;
	
	float dist = length(-position_eye);
	float fog_factor = 1.0 / exp((dist * fog_density) * (dist * fog_density));
    fog_factor = clamp(fog_factor, 0.0, 1.0);

    fragment_colour = mix(fog_color, vec4(Is + Id + Ia, 1.0) * texture(tex, frag_tex_coord).rgb, fog_factor);
}